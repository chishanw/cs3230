name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        working-directory: ./Team00/Code00
        run: cmake -B build/ -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        working-directory: ./Team00/Code00
        run: cmake --build build/ --config ${{env.BUILD_TYPE}}

      - name: Unit & Integration Test
        working-directory: ./Team00/Code00/build/src/
        run: |
          unit_testing/unit_testing -d yes --order lex
          integration_testing/integration_testing -d yes --order lex

  cpplint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - run: pip install cpplint
      - run: |
          cpplint \
          --filter=-legal/copyright,-build/header_guard,-build/namespaces,-runtime/int \
          --exclude=Team00/Code00/lib/ \
          --exclude=Team00/Code00/cmake-build-debug/ \
          --exclude=Team00/Code00/src/autotester/ \
          --exclude=Team00/Code00/src/autotester_gui/ \
          --recursive .
